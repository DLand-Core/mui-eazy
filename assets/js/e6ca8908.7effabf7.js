"use strict";(self.webpackChunkmui_eazy_docs=self.webpackChunkmui_eazy_docs||[]).push([[1304],{4171:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>f,contentTitle:()=>u,default:()=>m,frontMatter:()=>d,metadata:()=>c,toc:()=>p});var r=i(7458),t=i(1048),o=i(1162),a=i(2117),s=i(3328),l=(i(3964),i(9500));const d={sidebar_position:1},u="Tab Form {#configuration}",c={id:"components/super/tab-form",title:"Tab Form",description:"configuration}",source:"@site/docs/components/super/tab-form.mdx",sourceDirName:"components/super",slug:"/components/super/tab-form",permalink:"/mui-eazy/docs/components/super/tab-form",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/super/tab-form.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Super",permalink:"/mui-eazy/docs/category/super"},next:{title:"Tree Form",permalink:"/mui-eazy/docs/components/super/tree-form"}},f={},p=[{value:"Props",id:"npm2yarn-remark-plugin-configuration",level:2},{value:"Type",id:"type",level:2},{value:"TreeConfig",id:"TreeConfig",level:3},{value:"HandleClick",id:"HandleClick",level:3},{value:"ActionBtnArr",id:"ActionBtnArr",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"configuration",children:"Tab Form"}),"\n",(0,r.jsx)(n.p,{children:'"tree + from" combined high-level component, suitable for dynamic and complex form submission functionality.'}),"\n","\n","\n",(0,r.jsx)(l.NotifyProvider,{children:(0,r.jsxs)(a.Z,{defaultValue:"Demo",values:[{label:"Demo",value:"Demo"},{label:"PlayGround",value:"PlayGround"}],children:[(0,r.jsx)(s.Z,{value:"PlayGround",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:"live noInline",live:!0,children:"\n// ----------------------------------------------------------------------\nenum DealType {\n  CAPITAL_RAISING = \"capital_raising\",\n  EQUITY = \"equity\",\n  STARTUP_PITCH = \"startup_pitch\",\n  PARTNERSHIPS = \"partnerships\",\n  SELL_A_BUSINESS = \"sell_a_business\",\n}\nconst DealTypeOption = [\n  {\n    label: 'Capital Raising',\n    value: DealType.CAPITAL_RAISING,\n    info: 'Outline your business, growth goals and the debt funding needed for expansion.',\n  },\n  {\n    label: 'Equity',\n    value: DealType.EQUITY,\n    info: 'Share your business journey, goals and the specific support you seek in exchange for equity.',\n  },\n  {\n    label: 'Startup Pitch',\n    value: DealType.STARTUP_PITCH,\n    info: 'Create high value synergies by seeking suppliers, distribution channels, or collaborative opportunities for mutual growth.',\n  },\n  {\n    label: 'Partnerships',\n    value: DealType.PARTNERSHIPS,\n    info: 'Present your idea-stage business, seeking support in funding, products, or valuable feedback.',\n  },\n  {\n    label: 'Sell A Business',\n    value: DealType.SELL_A_BUSINESS,\n    info: 'Find a new owner to take your business forward. Describe the story so far and the price you have in mind to start the conversation.\xa0',\n  },\n];\n type EventType = \"Create\" | \"Draft\" | \"Update\" | \"Submit\" | \"Publish\";\n const useDealTypeFormViewConfig = ({\n  defaultValues,\n  type,\n}: {\n  id?: string;\n  defaultValues?: any;\n  type?: string;\n}): FormConfig => {\n  return useMemo<FormConfig>(() => {\n    return {\n      title: {\n        label: 'Deal Name',\n        defaultValue: defaultValues?.['title'],\n        wrapper: ({ children }) => {\n          return (\n            <FromWrapper\n              name=\"Deal Name\"\n              tipInfo=\"This is the headline for your opportunity. It should be attention-grabbing and\n          concise. Whether it's your company name or a catchy tagline, make it memorable.\n          This is the first thing potential investors or partners will see, so choose\n          something that reflects the essence of your opportunity. Keep it short and\n          impactful!\"\n            >\n              {children}\n            </FromWrapper>\n          );\n        },\n        fieldConfig: {\n          required: false,\n        },\n      },\n      type: {\n        type: 'radio',\n        label: 'Deal Type',\n        defaultValue: defaultValues?.['type'],\n        wrapper: ({ children }) => {\n          return <FromWrapper name=\"Select your deal type*\">{children}</FromWrapper>;\n        },\n        config: {\n          options: Object.values(DealTypeOption).map((item) => {\n            return {\n              key: item.value.toString(),\n              value: item.value.toString(),\n              label: item.label,\n              info: item.info,\n            };\n          }),\n        },\n        fieldConfig: {\n          required: true,\n        },\n      },\n    };\n  }, [defaultValues]);\n};\n\nconst useDealBasicsFormViewConfig = ({\n  defaultValues,\n}: {\n  id?: string;\n  defaultValues?: any;\n}): FormConfig => {\n\n  return useMemo<FormConfig>(() => {\n    let config: FormConfig = {\n      sub_title: {\n        defaultValue: defaultValues?.['sub_title'],\n        label: 'Sub-heading',\n        schema: Yup.string(),\n        fieldConfig: {\n          required: true,\n        },\n        wrapper: ({ children }) => {\n          return (\n            <FromWrapper\n              isShowDivider={false}\n              name=\"Deal details\"\n              tipInfo=\"The Sub-heading is your opportunity to complete the headline with a punchy and\n                          brief description. This is your chance to provide a little more context or\n                          excitement about your deal. Think of it as a tagline that adds flavor to your\n                          Deal Title. Keep it concise but compelling, giving potential investors or\n                          partners a sneak peek into what makes your opportunity special. Make them want\n                           to read more!\"\n            >\n              {children}\n            </FromWrapper>\n          );\n        },\n      },\n      highlights: {\n        name: 'components.highlights',\n        defaultValue: defaultValues?.['components']?.['highlights'] || [\"\", \"\", \"\"],\n        label: 'Highlights',\n        type: 'multiple',\n        fieldConfig: {\n          addLabel: 'Add highlight',\n          label: 'highlights',\n          validateFunc: (file) => {\n            let flag = true;\n            let info = '';\n            if (file.size > 6 * 1024 * 1024) {\n              flag = false;\n              info =\n                'The file size cannot be larger than 2M';\n            }\n            return [flag, info];\n          },\n          itemFieldConfig: {\n            label: \"Enter highlights\",\n            required: true,\n          },\n        },\n        schema: Yup.array().of(Yup.string().max(200).required(\"This is a required field\")).test({\n          test(value, ctx) {\n            if (\n              value!?.length >= 3\n            ) {\n              return true;\n            } else {\n              return ctx.createError({ message: 'You need to create at least 3 Highlights!' });\n            }\n          },\n        }),\n        wrapper: ({ children }) => {\n          return (\n            <FromWrapper\n              name=\"Highlights\"\n              tipInfo=\"This is your chance to grab attention quickly. Use bullet points to highlight\n              the key features or benefits of your deal. Keep it concise and impactful.\n              Minimum 3.\"\n            >\n              {children}\n            </FromWrapper>\n          );\n        },\n      },\n      amount: {\n        defaultValue: defaultValues?.['amount'] || '0',\n        schema: Yup.number().min(0, 'Amount must be greater than or equal to 0'),\n        fieldConfig: {\n          type: 'number',\n        },\n        label: `Amout`,\n        wrapper: ({ children }) => {\n          return (\n            <FromWrapper\n              isShowDivider={false}\n              name=\"Ask\"\n              tipInfo=\"Be explicit about what you're seeking from potential investors or partners.\n              Whether it's funding, expertise, resources, or something else, clarity is\n              key.\"\n            >\n              {children}\n            </FromWrapper>\n          );\n        },\n      },\n      ask_desc: {\n        defaultValue: defaultValues?.['ask_desc'] || '',\n        schema: Yup.string().max(1000, 'Description must be less than 1000 characters'),\n        fieldConfig: {\n          multiline: true,\n          minRows: 4,\n          type: 'textarea',\n        },\n        label: `Ask Description`,\n        wrapper: ({ children }) => {\n          return <FromWrapper isShowDivider={true}>{children}</FromWrapper>;\n        },\n      },\n      pics: {\n        type: 'upload',\n        label: 'Upload logo (optional)',\n        name: 'components.pics',\n        defaultValue: defaultValues?.['components']?.['pics'] || [],\n        schema: Yup.array().test({\n          test(value, ctx) {\n            if (\n              value!?.length >= 3\n            ) {\n              return true;\n            } else {\n              return ctx.createError({ message: 'You need to create at least 3 Pictures!' });\n            }\n          },\n        }),\n        fieldConfig: {\n          isCrop: true,\n          multiple: true,\n          validateFunc: (file) => {\n            let flag = true;\n            let info = '';\n            if (file.size > 6 * 1024 * 1024) {\n              flag = false;\n              info =\n                'The file size cannot be larger than 6M';\n            }\n            return [flag, info];\n          },\n          uploadAction: async (file) => {\n            return 'https://qiniu.moderate.run/img/1687610945521';\n          },\n        },\n      },\n      logo: {\n        type: 'upload',\n        label: 'Upload logo (optional)',\n        name: 'components.logo',\n        defaultValue: defaultValues?.['components']?.['logo'] || null,\n        fieldConfig: {\n          required: true,\n          sx: {\n            width: '200px',\n          },\n          multiple: false,\n          validateFunc: (file) => {\n            let flag = true;\n            let info = '';\n            if (file.size > 2 * 1024 * 1024) {\n              flag = false;\n              info =\n                'The file size cannot be larger than 2M';\n            }\n            return [flag, info];\n          },\n          uploadAction: async (file) => {\n            return 'https://qiniu.moderate.run/img/1687610945521';\n          },\n        },\n      },\n    };\n\n    return config\n  }, [defaultValues]);\n};\nfunction Demo() {\n  const [tabId, setTabId] = useState(\"1\")\n  const tabFormRef = useRef()\n  const defaultValues = {}\n  const dealTypeFormViewConfig = useDealTypeFormViewConfig({ defaultValues })\n  const dealBasicsFormViewConfig = useDealBasicsFormViewConfig({defaultValues})\n  const tabConfig = useMemo(() => {\n    return [\n      {\n        id: '1',\n        label: 'Deal Type',\n        node: dealTypeFormViewConfig,\n      },\n       {\n        id: \"2\",\n        label: \"Deal Basics\",\n        node: dealBasicsFormViewConfig,\n      },\n    ]\n\n  }, [dealTypeFormViewConfig,dealBasicsFormViewConfig]);\n  return (\n    <>\n      <TabForm\n        //@ts-ignore\n        tabId={tabId}\n        handleTabChange={(newTabId) => {\n          setTabId(newTabId);\n        }}\n        tabConfig={tabConfig}\n        ref={tabFormRef}\n      />\n      <Button onClick={() => {\n        tabFormRef.current!?.validate(Object.values(tabFormRef.current.getTabFormRef()))\n      }}>Submit</Button>\n    </>\n  );\n}\n\n\nrender(<Demo />);\n"})})}),(0,r.jsx)(s.Z,{value:"Demo",children:(0,r.jsx)(o.Z,{children:(0,r.jsx)(l.TabFormDemo,{})})})]})}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"show code"}),(0,r.jsxs)(a.Z,{children:[(0,r.jsx)(s.Z,{value:"componennt",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:"{8,16,24,26,46,61-68} showLineNumbers",children:'import { useMemo, useRef, useState } from "react";\nimport { useDealTypeFormViewConfig } from "./useDealTypeFormViewConfig";\nimport { TabForm } from "../components";\nimport { useDealBasicsFormViewConfig } from "./useDealBasicsFormViewConfig";\nimport { useBusinessFormViewConfig } from "./useBusinessFormViewConfig";\nimport { useMarketFormViewConfig } from "./useMarketFormViewConfig";\nimport { useMediaFormViewConfig } from "./useMediaFormViewConfig";\nimport { useFaqFromViewConfig } from "./useFaqFromViewConfig";\n\n// ----------------------------------------------------------------------\nexport type EventType = "Create" | "Draft" | "Update" | "Submit" | "Publish";\n\nexport default function Demo() {\n  const [tabId, setTabId] = useState("1");\n  const tabFormRef = useRef();\n  const defaultValues = {};\n  const dealTypeFormViewConfig = useDealTypeFormViewConfig({ defaultValues });\n  const dealBasicsFormViewConfig = useDealBasicsFormViewConfig({\n    defaultValues,\n  });\n  const businessFormViewViewConfig = useBusinessFormViewConfig({\n    defaultValues,\n  });\n  const marketFormViewonfig = useMarketFormViewConfig({ defaultValues });\n  const mediaFormViewConfig = useMediaFormViewConfig({ defaultValues });\n  const faqFromViewConfig = useFaqFromViewConfig({ defaultValues });\n  const tabConfig = useMemo(() => {\n    return [\n      {\n        id: "1",\n        label: "Deal Type",\n        node: dealTypeFormViewConfig,\n      },\n      {\n        id: "2",\n        label: "Deal Basics",\n        node: dealBasicsFormViewConfig,\n      },\n      {\n        id: "3",\n        label: "Business Details",\n        node: businessFormViewViewConfig,\n      },\n      {\n        id: "4",\n        label: "Market & Competition",\n        node: marketFormViewonfig,\n      },\n      {\n        id: "5",\n        label: "Uploads & Media",\n        node: mediaFormViewConfig,\n      },\n      {\n        id: "6",\n        label: "FAQs",\n        node: faqFromViewConfig,\n      },\n    ];\n  }, [\n    dealTypeFormViewConfig,\n    dealBasicsFormViewConfig,\n    businessFormViewViewConfig,\n    marketFormViewonfig,\n    mediaFormViewConfig,\n    faqFromViewConfig,\n  ]);\n  return (\n    <TabForm\n      //@ts-ignore\n      tabId={tabId}\n      handleTabChange={(newTabId) => {\n        setTabId(newTabId);\n      }}\n      tabConfig={tabConfig}\n      ref={tabFormRef}\n    />\n  );\n}\n'})})}),(0,r.jsx)(s.Z,{value:"form config",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:"showLineNumbers",children:'export const useFormConfigCreater_general = (\n  props: { id?: string } = {}\n): (() => FormConfig) => {\n  return () => {\n    return {\n      title: {\n        fieldConfig: {},\n      },\n      sub_title: {\n        fieldConfig: {},\n      },\n      description: {},\n      content: {\n        type: "editer",\n      },\n      video: {},\n    };\n  };\n};\n'})})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"npm2yarn-remark-plugin-configuration",children:"Props"}),"\n",(0,r.jsx)(n.admonition,{title:"tip",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Type: any, can be customized as needed."}),"\n",(0,r.jsxs)(n.li,{children:["Default value:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Not specified: optional."}),"\n",(0,r.jsx)(n.li,{children:'Specified as "require": mandatory.'}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Type link: Click to navigate to the details below."}),"\n"]})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Option"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"treeConfig"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#TreeConfig",children:(0,r.jsx)(n.code,{children:"TreeConfig"})})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"required"})}),(0,r.jsx)(n.td,{children:"Driving the display of data for tree+form."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"handleClick"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#HandleClick",children:(0,r.jsx)(n.code,{children:"HandleClick"})})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"required"})}),(0,r.jsx)(n.td,{children:"click event handler"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"actionBtnArr"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#ActionBtnArr",children:(0,r.jsx)(n.code,{children:"ActionBtnArr"})})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"required"})}),(0,r.jsx)(n.td,{children:"Whether to sync the selected converter across all code blocks."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"value"})}),(0,r.jsx)(n.td,{children:"any"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"null"})}),(0,r.jsx)(n.td,{children:"The value to be edited. Note that you should pass null or not pass it when creating, and pass it when editing."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"transferInput"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"(value)=>value"})}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["Translate the ",(0,r.jsx)(n.code,{children:"target data"}),". into ",(0,r.jsx)(n.code,{children:"form results"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"transferResult"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"(value)=>value"})}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["Translate the ",(0,r.jsx)(n.code,{children:"form results"})," into ",(0,r.jsx)(n.code,{children:"target data"}),"."]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"type",children:"Type"}),"\n",(0,r.jsx)(n.h3,{id:"TreeConfig",children:"TreeConfig"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'export interface TreeItemProps {\n  isError?: boolean;\n  formConfig?: FormConfig | null;\n  formCreater?: () => TreeItemProps | null;\n  id?: string;\n  parentId?: string;\n  uuid?: string;\n  active: boolean;\n  isCurrent?: boolean;\n  depth: number;\n  label: string;\n  name?: string;\n  sx?: SxProps<Theme>;\n  isAdd?: boolean;\n  type?: "array" | "object";\n  onAdd?: (listArr: TreeItemProps[]) => void;\n  onDelete?: (id: string, listArr: TreeItemProps[]) => void;\n  children?: React.ReactNode | undefined;\n  sections?: TreeItemProps[];\n  judeShow?: () => boolean;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"HandleClick",children:"HandleClick"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"  ({ type, isSuccess, result, }: {\n    type: any;\n    isSuccess: boolean;\n    result: any;\n  }) => void\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ActionBtnArr",children:"ActionBtnArr"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"{\n  name: string;\n}\n[];\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},3964:()=>{}}]);